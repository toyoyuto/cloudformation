AWSTemplateFormatVersion: "2010-09-09"
Description: 
  Amazon Web Services Network & server construction from the basics

Metadata: 
  "AWS::CloudFormation::Interface": 
    ParameterGroups: 
      - Label: 
          default: "Project Name Prefix"
        Parameters: 
          - PJPrefix
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCCIDR
          - PublicSubnetCIDR
          - PrivateSubnetCIDR
          - KeyName
          - PublicIP
          - PrivateIP

    ParameterLabels: 
      VPCCIDR: 
        default: "VPC CIDR"
      PublicSubnetCIDR: 
        default: "PublicSubnet CIDR"
      PrivateSubnetCIDR: 
        default: "PrivateSubnet CIDR"
      PublicIP: 
        default: "Public IP"
      PrivateIP: 
        default: "Private IP"


# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------# 
Parameters:
  PJPrefix:
    Type: String

  VPCCIDR:
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnetCIDR:
    Type: String
    Default: "10.0.1.0/24"

  PrivateSubnetCIDR:
    Type: String
    Default: "10.0.2.0/24"

  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"

  PublicIP:
    Type: String
    Default: "10.0.1.10"

  PrivateIP:
    Type: String
    Default: "10.0.2.10"

Resources: 
# ------------------------------------------------------------#
#  VPC
# ------------------------------------------------------------#
# VPC Create
  VPC: 
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-vpc"

# InternetGateway Create
  InternetGateway: 
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-igw"

# IGW Attach
  InternetGatewayAttachment: 
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC 

# ------------------------------------------------------------#
#  Subnet
# ------------------------------------------------------------#          
# Public Subnet Create
  PublicSubnet: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref PublicSubnetCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-public-subnet"
                    
# Private Subnet Create
  PrivateSubnet: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref PrivateSubnetCIDR
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-private-subnet"
                    
# ------------------------------------------------------------#
#  RouteTable
# ------------------------------------------------------------#          
# Public RouteTable Create
  PublicRouteTable: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-public-route"

# Private RouteTable Create
  PrivateRouteTable: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-private-route"

# ------------------------------------------------------------#
#  NAT Gateway
# ------------------------------------------------------------#
  NATGateway: 
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt NATGatewayAEIP.AllocationId 
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Name
          Value: !Sub "${PJPrefix}-natgw"
  # NATGateway For EIP Create
  NATGatewayAEIP: 
    Type: "AWS::EC2::EIP"
    Properties: 
      Domain: vpc

# ------------------------------------------------------------#
# Routing
# ------------------------------------------------------------# 
# PublicRoute Create
  PublicRoute: 
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway 
# PrivateRoute Create
  PrivateRoute: 
    Type: "AWS::EC2::Route"
    Properties: 
      RouteTableId: !Ref PrivateRouteTable 
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway 

# ------------------------------------------------------------#
# RouteTable Associate
# ------------------------------------------------------------# 
# PublicRouteTable Associate PublicSubnet
  PublicSubnetRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
# PrivateRouteTable Associate PrivateSubnet
  PrivateSubnetRouteTableAssociation: 
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        SubnetId: !Ref PrivateSubnet
        RouteTableId: !Ref PrivateRouteTable

# ------------------------------------------------------------#
# EC2
# ------------------------------------------------------------# 
  # WebServerインスタンス
  WebServer: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00f045aed21a55240
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet
          PrivateIpAddress: !Ref PublicIP
          GroupSet:
            - !Ref WebServerSG

      UserData: !Base64 |
        #!/bin/bash
        sudo yum -y update
        sudo yum -y install httpd
        sudo systemctl start httpd.service
        sudo systemctl enable httpd.service
        
        sudo amazon-linux-extras install php7.3
        sudo yum -y install php php-mbstring
        sudo yum -y install mariadb-server
        
        cd ~
        wget https://ja.wordpress.org/latest-ja.tar.gz
        tar xzvf latest-ja.tar.gz 
        cd wordpress
        sudo cp -r * /var/www/html
        sudo chown apache:apache /var/www/html -R

        sudo systemctl restart httpd.service

      Tags:
          - Key: Name
            Value: !Sub "${PJPrefix}-web-server"

  # WebServerセキュリティグループ
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: web-sg-cf
      GroupDescription: web server sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort : -1
          ToPort : -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort : -1
          ToPort : -1
          CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-web-server-sg"

  # DBServerインスタンス
  DbServer: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00f045aed21a55240
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: !Ref PrivateIP
          GroupSet:
            - !Ref DbServerSG

      UserData: !Base64 |
        #!/bin/bash
        sudo yum -y update
        sudo yum -y install mariadb-server
        sudo systemctl start mariadb
        sudo systemctl enable mariadb

      Tags:
          - Key: Name
            Value: !Sub "${PJPrefix}-db-server"

  # DBServerセキュリティグループ
  DbServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: db-sg-cf
      GroupDescription: db server sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIpv6: ::/0
        - IpProtocol: icmp
          FromPort : -1
          ToPort : -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort : -1
          ToPort : -1
          CidrIpv6: ::/0
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-db-server-sg"

# ------------------------------------------------------------#
# Output Parameters
# ------------------------------------------------------------#                
Outputs:
# VPC
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub "${PJPrefix}-vpc"

  VPCCIDR:
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub "${PJPrefix}-vpc-cidr"

# Subnet
  PublicSubnet:
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${PJPrefix}-public-subnet"

  PublicSubnetCIDR:
    Value: !Ref PublicSubnetCIDR
    Export:
      Name: !Sub "${PJPrefix}-public-subnet-cidr"

  PrivateSubnet:
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub "${PJPrefix}-private-subnet"
    
  PrivateSubnetCIDR:
    Value: !Ref PrivateSubnetCIDR
    Export:
      Name: !Sub "${PJPrefix}-private-subnet--cidr"

# Route
  PublicRouteTable:
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${PJPrefix}-public-route"

  PrivateRouteTable:
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${PJPrefix}-private-route"

# EC2
  WebServer:
    Value: !Ref WebServer
    Export:
      Name: !Sub "${PJPrefix}-web-server"
  DbServer:
    Value: !Ref DbServer
    Export:
      Name: !Sub "${PJPrefix}-db-server"
